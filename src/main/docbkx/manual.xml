<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>CoNLLModules</title>
        <subtitle>User's Guide</subtitle>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Andreas</firstname>
                    <surname>Hildebrandt</surname>
                </personname>
                <email>saltnpepper@lists.hu-berlin.de</email>
            </author>        
            <author>
                <orgname xml:id="org2">SFB 632 Information Structure / D1 Linguistic
                    Database</orgname>
            </author>
            <author>
                <orgname xml:id="org3">Humboldt-Universität zu Berlin</orgname>
            </author>
            <author>
                <orgname xml:id="org4">Universität Potsdam</orgname>
            </author>
        </authorgroup>
        <copyright>
            <year>2012</year>
            <holder><xref linkend="org2"/>, <xref linkend="org3"/>, <xref linkend="org3"/>, <xref linkend="org4"/>, All rights reserved.</holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The intention of this document is first to give a guide to the user of how to use the
            here mentioned pepper modules and how to utilize a mapping performed by them. Second
            this document shall give a closer view in the details of such a mapping in a declarative
            way, to give the user a chance to understand how specific data will be mapped by the
            presented pepper modules.</para>
    </preface>
    <chapter>
        <title>Overview</title>
        <para>This project contains the pepper modules listed in <xref linkend="table_overview"/>. A
            single module can be identified via its coordinates (module-name, format-name,
            format-version) also given in <xref linkend="table_overview"/>. You can use these
            coordinates in a pepper workflow description file to identify the modules in a pepper
            conversion process. A description of how to model a workfloe description file can be
            found under https://korpling.german.hu-berlin.de/saltnpepper/.</para>
        <table xml:id="table_overview" frame="all">
            <title>pepper modules contained in this project</title>
            <tgroup cols="3" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Name of pepper module</entry>
                        <entry>Type of pepper module</entry>
                        <entry>Format (if module is im- or exporter)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><xref linkend="conll_importer" endterm="conll_importer_name"
                            /></entry>
                        <entry>importer</entry>
                        <entry>1.0</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <chapter xml:id="changes">
        <title>Changes</title>
        <para> This chapter contains the changes in version ${project.version} compared to the
            previous version.</para>
        <section>
            <title><xref linkend="conll_importer_name"/></title>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>changes</para>
                </listitem>
            </itemizedlist>
        </section>
    </chapter>
    <chapter>
        <title>CoNLL format</title>
        <para> A CoNLL file as defined here contains one tab separated row per token. Each row
            contains exactly 10 columns. No blank characters are allowed. Sentences are separated by
            an empty row. The columns are the following: <table>
                <title/>
                <tgroup cols="3">
                    <tbody>
                        <row>
                            <entry>1</entry>
                            <entry>ID</entry>
                            <entry>The number of the token in the current sentence, starting with
                                1</entry>
                        </row>
                        <row>
                            <entry>2</entry>
                            <entry>FORM</entry>
                            <entry>The form of the token</entry>
                        </row>
                        <row>
                            <entry>3</entry>
                            <entry>LEMMA</entry>
                            <entry>The lemma of the token</entry>
                        </row>
                        <row>
                            <entry>4</entry>
                            <entry>CPOSTAG</entry>
                            <entry>Coarse-grained part-of-speech tag</entry>
                        </row>
                        <row>
                            <entry>5</entry>
                            <entry>POSTAG</entry>
                            <entry>Fine-grained part-of-speech tag</entry>
                        </row>
                        <row>
                            <entry>6</entry>
                            <entry>FEATS</entry>
                            <entry>Syntactic/morphological/miscellaneous features, separated by the
                                pipe character</entry>
                        </row>
                        <row>
                            <entry>7</entry>
                            <entry>HEAD</entry>
                            <entry>The head of the token: an ID or 0 for none</entry>
                        </row>
                        <row>
                            <entry>8</entry>
                            <entry>DEPREL</entry>
                            <entry>Dependency relation to HEAD</entry>
                        </row>
                        <row>
                            <entry>9</entry>
                            <entry>PHEAD</entry>
                            <entry>The projective head of the token: an ID or 0 for none</entry>
                        </row>
                        <row>
                            <entry>10</entry>
                            <entry>PDEPREL</entry>
                            <entry>Dependency relation to PHEAD</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table> Only fields 1, 2, 4, 5, 7 and 8 are guaranteed to contain non-dummy values. The
            other fields may contain an underscore as dummy value. The CoNLLImporter does not
            require the input files to satisfy all of these conditions strictly: only fields 1, 2
            and 7 must not contain dummy values. Nevertheless, there will be warnings during the
            conversion if a value mandatory as to the first definition is missing.
            <programlisting>
            1     Cathy       Cathy     N        N        eigen|ev|neut            2     su        _     _
            2     zag         zie       V        V        trans|ovt|1of2of3|ev     0     ROOT      _     _
            3     hen         hen       Pron     Pron     per|3|mv|datofacc        2     obj1      _     _
            4     wild        wild      Adj      Adj      attr|stell|onverv        5     mod       _     _
            5     zwaaien     zwaai     N        N        soort|mv|neut            2     vc        _     _
            6     .           .         Punc     Punc     punct                    5     punct     _     _
            </programlisting>
            Example 1: sample input file content </para>
    </chapter>
    
    <chapter xml:id="conll_importer">
        <title xml:id="conll_importer_name">CoNLLImporter</title>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="property_overview"/> contains
                an overview of all usable properties to customize the behaviour of this pepper
                module. The following section contains a close description to each single property
                and describes the resulting differences in the mapping to the salt model. </para>
            <table xml:id="property_overview" frame="all">
                <title>pepper modules contained in this project</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="prop_spos" endterm="prop_spos_name"/></entry>
                            <entry> POSTAG CPOSTAG NONE</entry>
                            <entry>optional</entry>
                            <entry>POSTAG</entry>
                        </row>
                        <row>
                            <entry><link xlink:href="prop_lemma">conll.SLEMMA</link></entry>
                            <entry> LEMMA NONE</entry>
                            <entry>optional</entry>
                            <entry>LEMMA</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_considerProjectivity" endterm="prop_considerProjectivity_name"/>></entry>
                            <entry>Boolean ('true'|'false')</entry>
                            <entry>optional</entry>
                            <entry>true</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_projectiveMode" endterm="prop_projectiveMode_name"/>
                                    ></entry>
                            <entry>(TYPE|NAMESPACE)</entry>
                            <entry>optional</entry>
                            <entry>TYPE</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_splitFeatures" endterm="prop_splitFeatures_name"
                                /></entry>
                            <entry>Boolean ('true'|'false')</entry>
                            <entry>optional</entry>
                            <entry>TYPE</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_postag_tag" endterm="prop_postag_tag_name"
                                /></entry>
                            <entry>TAG=ATTRIBUTE</entry>
                            <entry>optional</entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><xref linkend="prop_cpos_tag" endterm="prop_cpos_tag_name"/></entry>
                            <entry>TAG=ATTRIBUTE</entry>
                            <entry>optional</entry>
                            <entry/>
                        </row>
                        <row>
                            <entry><xref linkend="prop_field6_default" endterm="prop_field6_default_name"
                                /></entry>
                            <entry>a single category name or a pipe separated sequence of category
                                names</entry>
                            <entry>optional</entry>
                            <entry>morph</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="prop_spos">
                <title xml:id="prop_spos_name">conll.SPOS</title>
                <para><code>conll.SPOS=FIELD(,ALTERNATIVEFIELD)</code></para>
                <para>States which CoNLL field´s data to use for the SPOSAnnotation of salt tokens,
                    or, if FIELD is NONE, not to create SPOSAnnotations at all. If the field
                    designated by FIELD contains no data, ALTERNATIVEFIELD (if given), is used. If
                    that field contains no data, no SPOSAnnotation is created for the particular
                    salt token. The default value for this attribute is POSTAG. Allowed values for
                    FIELD/ALTERNATIVEFIELD: POSTAG CPOSTAG NONE</para>
            </sect2>
            <sect2 xml:id="prop_lemma">
                <title xml:id="prop_lemma_name">conll.SLEMMA</title>
                <para><code>conll.SLEMMA=FIELD</code></para>
                <para>States which CoNLL field´s data to use for the SLemmaAnnotation of salt
                    tokens, or, if FIELD is NONE, not to create SLemmaAnnotations at all. If the
                    field designated by FIELD contains no data, no SLemmaAnnotation is created for
                    the particular salt token. The default value for this attribute is LEMMA.</para>
            </sect2>
            <sect2 xml:id="prop_considerProjectivity">
                <title xml:id="prop_considerProjectivity_name">conll.considerProjectivity</title>
                <para><code>conll.considerProjectivity=VALUE</code></para>
                <para>States whether to create a salt pointing relation from projective head of
                    tokens to the dependent.</para>
            </sect2>
            <sect2 xml:id="prop_projectiveMode">
                <title xml:id="prop_projectiveMode_name">conll.projectiveMode</title>
                <para><code>conll.projectiveMode=VALUE</code></para>
                <para>If the attribute considerProjectivity is set TRUE, the attribute
                    projectiveMode sets the SType of the pointing relation. If VALUE is TYPE, that
                    SType will be "prodep". If VALUE is NAMESPACE, that SType will be "dep", and the
                    annotation´s namespace will be "projective".</para>
            </sect2>
            <sect2 xml:id="prop_splitFeatures">
                <title xml:id="prop_splitFeatures_name">conll.splitFeatures</title>
                <para><code>conll.splitFeatures=VALUE</code></para>
                <para>If VALUE is TRUE and there is an applicable POSTAG/CPOSTAG attribute (see
                    below), the value of field 6 (Syntactic/morphological/miscellaneous features)
                    will be split into it´s pipe separated elements, resulting in a SAnnotation for
                    each element. If VALUE is FALSE, no splitting is done.</para>
            </sect2>
            <sect2 xml:id="prop_postag_tag">
                <title xml:id="prop_postag_tag_name">conll.field6.POSTAG.TAG</title>
                <para><code>conll.field6.POSTAG.TAG=VALUE</code></para>
                <para>When the POSTAG TAG is present in a data row, the FEATS value of the data is
                    correlated with the VALUE of this attribute. If the attribute splitFeatures is
                    set FALSE, a single SAnnotation is created, with VALUE as SName and the FEATS
                    value as SValue. If splitFeatures is set TRUE, both VALUE and the FEATS value
                    are split into their pipe separated elements. If the number of elements is the
                    same, the adequate number of SAnnotations is created, each of which gets the
                    VALUE element as SName and the FEATS value element as SValue. If the number of
                    elements differs, the lesser number of SAnnotations is created, possibly
                    resulting in data loss. </para>
                <para>attribute: conll.field6.POSTAG.NN=CASE|NUMBER|GENDER</para>
                <para>data row: 4 Hundes Hund N NN Gen|Sg|Masc 3 subj _ _</para>
                <para>Since the data row´s POSTAG value is NN, the FEATS value Gen|Sg|Masc is
                    correlated with the attribute´s value CASE|NUMBER|GENDER, resulting in three
                    SAnnotations for the SToken, named CASE, NUMBER and GENDER, with the SValues
                    "Gen", "Sg" and "Masc" repectively.</para>
                <para> Allowed values for TAG: any tag of the used (finegrained) tagset Allowed
                    values for VALUE: a single category name or a pipe separated sequence of
                    category names</para>
            </sect2>
            <sect2 xml:id="prop_cpos_tag">
                <title xml:id="prop_cpos_tag_name">conll.field6.CPOSTAG.TAG</title>
                <para><code>conll.field6.CPOSTAG.TAG=VALUE</code></para>
                <para>When the CPOSTAG TAG is present in a data row, the FEATS value of the data is
                    correlated with the VALUE of this attribute. If the attribute splitFeatures is
                    set FALSE, a single SAnnotation is created, with VALUE as SName and the FEATS
                    value as SValue. If splitFeatures is set TRUE, both VALUE and the FEATS value
                    are split into their pipe separated elements. If the number of elements is the
                    same, the adequate number of SAnnotations is created, each of which gets the
                    VALUE element as SName and the FEATS value element as SValue. If the number of
                    elements differs, the lesser number of SAnnotations is created, possibly
                    resulting in data loss. </para>
                <note>
                    <para>If a data row is matching conditions for both a POSTAG and a CPOSTAG
                        attribute, the POSTAG attribute overrules the CPOSTAG attribute!</para>
                </note>
                <para>attribute: conll.field6.CPOSTAG.N=CASE|NUMBER|GENDER</para>
                <para>data row: 4 Hundes Hund N NN Gen|Sg|Masc 3 subj _ _</para>
                <para>Since the data row´s CPOSTAG value is N, the FEATS value Gen|Sg|Masc is
                    correlated with the attribute´s value CASE|NUMBER|GENDER, resulting in three
                    SAnnotations for the SToken, named CASE, NUMBER and GENDER, with the SValues
                    "Gen", "Sg" and "Masc" repectively.</para>
                <para>Allowed values for TAG: any tag of the used (coarsegrained) tagset</para>
                <para>Allowed values for VALUE: a single category name or a pipe separated sequence
                    of category names</para>
            </sect2>
            <sect2 xml:id="prop_field6_default">
                <title xml:id="prop_field6_default_name">conll.field6.default</title>
                <para><code>conll.field6.default=VALUE</code></para>
                <para>If no POSTAG/CPOSTAG attribute is defined for both the POSTAG and the CPOSTAG
                    of a data row, a SAnnotation with the default SName VALUE is created (or, if
                    VALUE is a pipe separated sequence of category names, the adequate number of
                    SAnnotations). The default value for this default is morph.</para>
                <para>Allowed values for VALUE: a single category name or a pipe separated sequence
                    of category names</para>
            </sect2>
        </sect1>
    </chapter>  

</book>
